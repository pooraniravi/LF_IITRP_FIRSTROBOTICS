
com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000175  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fb  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000288  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d3  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000068  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pot_init>:
#include<avr/io.h>
#include<util/delay.h>
void pot_init()
{
ADCSRA|=(1<<ADEN);     //enabling 
  6c:	37 9a       	sbi	0x06, 7	; 6
ADMUX|=(1<<REFS0);    //setting reference voltage = vcc
  6e:	3e 9a       	sbi	0x07, 6	; 7
ADCSRA|=(1<<ADPS2);    //setting sampling rate
  70:	32 9a       	sbi	0x06, 2	; 6
}
  72:	08 95       	ret

00000074 <pot_adc>:
int pot_adc()
{
int p=0b00000001;       //setting input
ADCSRA|=(1<<ADSC);     //starting conversion
  74:	36 9a       	sbi	0x06, 6	; 6
ADMUX|=p;               
  76:	38 9a       	sbi	0x07, 0	; 7
while((ADCSRA&(1<<ADIF))==0)  //checking if conversion is complete
  78:	34 9b       	sbis	0x06, 4	; 6
  7a:	fe cf       	rjmp	.-4      	; 0x78 <pot_adc+0x4>
{
}
ADCSRA|=(1<<ADIF);             //clearing adif bit
  7c:	34 9a       	sbi	0x06, 4	; 6
return(ADC);                    //storing output
  7e:	24 b1       	in	r18, 0x04	; 4
  80:	35 b1       	in	r19, 0x05	; 5
}
  82:	c9 01       	movw	r24, r18
  84:	08 95       	ret

00000086 <main>:
void main()
{
  86:	5f 92       	push	r5
  88:	6f 92       	push	r6
  8a:	7f 92       	push	r7
  8c:	8f 92       	push	r8
  8e:	9f 92       	push	r9
  90:	af 92       	push	r10
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
DDRD=0b00000000;    //input part
  a4:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111;    //output part
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111;   //pulling up
  aa:	82 bb       	out	0x12, r24	; 18
int c;
pot_init();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <pot_init>
while(1)
{
c=PIND;             //reads input
p=pot_adc();
if(c==0b11110000)   //special case
PORTB=0b11111010;
  b0:	fa ef       	ldi	r31, 0xFA	; 250
  b2:	df 2e       	mov	r13, r31
if(c==0b11111100)   //line tracker: if both wheels on white, go forward
PORTB=0b11101010;
if(c==0b11111110)   //line tracker: if right wheel on white, take left turn
PORTB=0b11100110;
if(c==0b11111101)   //line tracker: if  left wheel on white, take right turn
PORTB=0b11101001;
  b4:	e9 ee       	ldi	r30, 0xE9	; 233
  b6:	5e 2e       	mov	r5, r30
if(c==0b11110000)   //special case
PORTB=0b11111010;
if(c==0b11111100)   //line tracker: if both wheels on white, go forward
PORTB=0b11101010;
if(c==0b11111110)   //line tracker: if right wheel on white, take left turn
PORTB=0b11100110;
  b8:	76 ee       	ldi	r23, 0xE6	; 230
  ba:	67 2e       	mov	r6, r23
c=PIND;             //reads input
p=pot_adc();
if(c==0b11110000)   //special case
PORTB=0b11111010;
if(c==0b11111100)   //line tracker: if both wheels on white, go forward
PORTB=0b11101010;
  bc:	6a ee       	ldi	r22, 0xEA	; 234
  be:	76 2e       	mov	r7, r22
if(c==0b11111101)   //line tracker: if  left wheel on white, take right turn
PORTB=0b11101001;
if(c==0b11111111)   //marker: if both wheels on black,beep once and go front
PORTB=0b11111010;
if(c==0b11111000||c==0b11111001||c==0b11111010||c==0b11111011)   //obstacle detector: if obstacle there, beep and wait till obstacle is removed
PORTB=0b11110000;
  c0:	50 ef       	ldi	r21, 0xF0	; 240
  c2:	85 2e       	mov	r8, r21
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110111 && p<=256)
{
PORTB=0b00011010;
  c4:	4a e1       	ldi	r20, 0x1A	; 26
  c6:	94 2e       	mov	r9, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	30 ed       	ldi	r19, 0xD0	; 208
  ca:	e3 2e       	mov	r14, r19
  cc:	37 e0       	ldi	r19, 0x07	; 7
  ce:	f3 2e       	mov	r15, r19
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110110 && p<=256)   //cave detector: if it enters cave it should turn left with reduced speed
{
PORTB=0b00000110;
  d0:	08 eb       	ldi	r16, 0xB8	; 184
  d2:	1b e0       	ldi	r17, 0x0B	; 11
  d4:	26 e0       	ldi	r18, 0x06	; 6
  d6:	a2 2e       	mov	r10, r18
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110101  && p<=256)   //cave detector: if it enters cave it should turn right with reduced speed
{
PORTB=0b00001001;
  d8:	99 e0       	ldi	r25, 0x09	; 9
  da:	b9 2e       	mov	r11, r25
PORTB=0b11111010;
if(c==0b11111000||c==0b11111001||c==0b11111010||c==0b11111011)   //obstacle detector: if obstacle there, beep and wait till obstacle is removed
PORTB=0b11110000;
if(c==0b11110100 && p<=256)   //cave detector: if it enters cave it should move forward with reduced speed
{
PORTB=0b00001010;
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	c8 2e       	mov	r12, r24
int c;
pot_init();
int p;
while(1)
{
c=PIND;             //reads input
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	c8 2f       	mov	r28, r24
  e4:	d0 e0       	ldi	r29, 0x00	; 0
p=pot_adc();
  e6:	0e 94 3a 00 	call	0x74	; 0x74 <pot_adc>
  ea:	9c 01       	movw	r18, r24
if(c==0b11110000)   //special case
  ec:	c0 3f       	cpi	r28, 0xF0	; 240
  ee:	d1 05       	cpc	r29, r1
  f0:	11 f4       	brne	.+4      	; 0xf6 <main+0x70>
PORTB=0b11111010;
  f2:	d8 ba       	out	0x18, r13	; 24
  f4:	0f c0       	rjmp	.+30     	; 0x114 <main+0x8e>
if(c==0b11111100)   //line tracker: if both wheels on white, go forward
  f6:	cc 3f       	cpi	r28, 0xFC	; 252
  f8:	d1 05       	cpc	r29, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <main+0x7a>
PORTB=0b11101010;
  fc:	78 ba       	out	0x18, r7	; 24
  fe:	0e c0       	rjmp	.+28     	; 0x11c <main+0x96>
if(c==0b11111110)   //line tracker: if right wheel on white, take left turn
 100:	ce 3f       	cpi	r28, 0xFE	; 254
 102:	d1 05       	cpc	r29, r1
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x84>
PORTB=0b11100110;
 106:	68 ba       	out	0x18, r6	; 24
 108:	09 c0       	rjmp	.+18     	; 0x11c <main+0x96>
if(c==0b11111101)   //line tracker: if  left wheel on white, take right turn
 10a:	cd 3f       	cpi	r28, 0xFD	; 253
 10c:	d1 05       	cpc	r29, r1
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x8e>
PORTB=0b11101001;
 110:	58 ba       	out	0x18, r5	; 24
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x96>
if(c==0b11111111)   //marker: if both wheels on black,beep once and go front
 114:	cf 3f       	cpi	r28, 0xFF	; 255
 116:	d1 05       	cpc	r29, r1
 118:	09 f4       	brne	.+2      	; 0x11c <main+0x96>
PORTB=0b11111010;
 11a:	d8 ba       	out	0x18, r13	; 24
if(c==0b11111000||c==0b11111001||c==0b11111010||c==0b11111011)   //obstacle detector: if obstacle there, beep and wait till obstacle is removed
 11c:	ce 01       	movw	r24, r28
 11e:	88 5f       	subi	r24, 0xF8	; 248
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	04 97       	sbiw	r24, 0x04	; 4
 124:	08 f4       	brcc	.+2      	; 0x128 <main+0xa2>
PORTB=0b11110000;
 126:	88 ba       	out	0x18, r8	; 24
if(c==0b11110100 && p<=256)   //cave detector: if it enters cave it should move forward with reduced speed
 128:	c4 3f       	cpi	r28, 0xF4	; 244
 12a:	d1 05       	cpc	r29, r1
 12c:	29 f4       	brne	.+10     	; 0x138 <main+0xb2>
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	31 40       	sbci	r19, 0x01	; 1
 132:	b4 f6       	brge	.-84     	; 0xe0 <main+0x5a>
{
PORTB=0b00001010;
 134:	c8 ba       	out	0x18, r12	; 24
 136:	19 c0       	rjmp	.+50     	; 0x16a <main+0xe4>
_delay_ms(8);
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110101  && p<=256)   //cave detector: if it enters cave it should turn right with reduced speed
 138:	c5 3f       	cpi	r28, 0xF5	; 245
 13a:	d1 05       	cpc	r29, r1
 13c:	29 f4       	brne	.+10     	; 0x148 <main+0xc2>
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	31 40       	sbci	r19, 0x01	; 1
 142:	74 f6       	brge	.-100    	; 0xe0 <main+0x5a>
{
PORTB=0b00001001;
 144:	b8 ba       	out	0x18, r11	; 24
 146:	11 c0       	rjmp	.+34     	; 0x16a <main+0xe4>
_delay_ms(8);
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110110 && p<=256)   //cave detector: if it enters cave it should turn left with reduced speed
 148:	c6 3f       	cpi	r28, 0xF6	; 246
 14a:	d1 05       	cpc	r29, r1
 14c:	29 f4       	brne	.+10     	; 0x158 <main+0xd2>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 40       	sbci	r19, 0x01	; 1
 152:	34 f6       	brge	.-116    	; 0xe0 <main+0x5a>
{
PORTB=0b00000110;
 154:	a8 ba       	out	0x18, r10	; 24
 156:	09 c0       	rjmp	.+18     	; 0x16a <main+0xe4>
_delay_ms(8);
PORTB=0b00000000;
_delay_ms(12);
}
if(c==0b11110111 && p<=256)
 158:	c7 3f       	cpi	r28, 0xF7	; 247
 15a:	d1 05       	cpc	r29, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <main+0xda>
 15e:	c0 cf       	rjmp	.-128    	; 0xe0 <main+0x5a>
 160:	21 50       	subi	r18, 0x01	; 1
 162:	31 40       	sbci	r19, 0x01	; 1
 164:	0c f0       	brlt	.+2      	; 0x168 <main+0xe2>
 166:	bc cf       	rjmp	.-136    	; 0xe0 <main+0x5a>
{
PORTB=0b00011010;
 168:	98 ba       	out	0x18, r9	; 24
 16a:	c7 01       	movw	r24, r14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xe6>
_delay_ms(8);
PORTB=0b00000000;
 170:	18 ba       	out	0x18, r1	; 24
 172:	c8 01       	movw	r24, r16
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xee>
 178:	b3 cf       	rjmp	.-154    	; 0xe0 <main+0x5a>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
